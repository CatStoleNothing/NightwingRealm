import React, { useState, useEffect } from 'react';
import { ExpeditionEngine } from '../core/ExpeditionEngine';
import { slavicStyles } from '../styles/CombatStyles';

export function ExpeditionScreen({ expedition, player, onMove, onEvent, onComplete, onExit }) {
  const [currentEvent, setCurrentEvent] = useState(null);
  const [eventResult, setEventResult] = useState(null);
  const [showEventDialog, setShowEventDialog] = useState(false);
  const [log, setLog] = useState([]);

  const addLogMessage = (message) => {
    setLog(prev => [...prev, { message, timestamp: Date.now() }]);
  };

  const handleCellClick = (x, y) => {
    const dx = x - expedition.playerPosition.x;
    const dy = y - expedition.playerPosition.y;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ —Ä—è–¥–æ–º
    if (Math.abs(dx) + Math.abs(dy) !== 1) {
      return;
    }

    const moveResult = ExpeditionEngine.move(expedition, dx, dy);
    
    if (moveResult.success) {
      onMove(dx, dy);
      addLogMessage(moveResult.message);

      if (moveResult.event) {
        setCurrentEvent(moveResult.event);
        setShowEventDialog(true);
      }

      if (moveResult.gameOver) {
        addLogMessage('–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!');
        setTimeout(() => onExit(), 2000);
      }
    } else {
      addLogMessage(moveResult.message);
    }
  };

  const handleEvent = () => {
    if (!currentEvent) return;

    const result = ExpeditionEngine.handleEvent(expedition, currentEvent, player);
    setEventResult(result);
    addLogMessage(result.message);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ –∏–≥—Ä–æ–∫—É
    if (result.damage) {
      player.hp = Math.max(1, player.hp - result.damage);
    }
    if (result.heal) {
      player.hp = Math.min(100, player.hp + result.heal);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
    if (result.bossDefeated || ExpeditionEngine.checkExpeditionComplete(expedition)) {
      addLogMessage('–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      setTimeout(() => onComplete(expedition.rewards), 2000);
    }
  };

  const renderCell = (cell, x, y) => {
    const isPlayer = expedition.playerPosition.x === x && expedition.playerPosition.y === y;
    const isDiscovered = expedition.discovered.has(`${x},${y}`);
    
    let cellStyle = {
      width: 40,
      height: 40,
      border: '1px solid #333',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      cursor: 'pointer',
      transition: 'all 0.2s ease',
      fontSize: '12px'
    };

    if (isPlayer) {
      cellStyle = {
        ...cellStyle,
        background: slavicStyles.colors.danger,
        color: 'white',
        fontWeight: 'bold'
      };
    } else if (cell === 1) {
      cellStyle = {
        ...cellStyle,
        background: slavicStyles.colors.secondary,
        cursor: 'not-allowed'
      };
    } else if (cell === 2 && isDiscovered) {
      cellStyle = {
        ...cellStyle,
        background: slavicStyles.colors.info,
        color: 'white'
      };
    } else if (cell === 3 && isDiscovered) {
      cellStyle = {
        ...cellStyle,
        background: slavicStyles.colors.warning,
        color: 'white',
        fontWeight: 'bold'
      };
    } else if (isDiscovered) {
      cellStyle = {
        ...cellStyle,
        background: slavicStyles.colors.surface
      };
    } else {
      cellStyle = {
        ...cellStyle,
        background: '#222',
        color: '#666'
      };
    }

    return (
      <div
        key={`${x}-${y}`}
        style={cellStyle}
        onClick={() => handleCellClick(x, y)}
        onMouseEnter={(e) => {
          if (!isPlayer && cell !== 1) {
            e.target.style.transform = 'scale(1.1)';
            e.target.style.boxShadow = '0 0 8px rgba(218,165,32,0.6)';
          }
        }}
        onMouseLeave={(e) => {
          e.target.style.transform = 'scale(1)';
          e.target.style.boxShadow = 'none';
        }}
      >
        {isPlayer ? 'üë§' : 
         cell === 1 ? 'üß±' :
         cell === 2 ? '‚öîÔ∏è' :
         cell === 3 ? 'üëπ' :
         isDiscovered ? '¬∑' : '?'}
      </div>
    );
  };

  const renderEventDialog = () => {
    if (!currentEvent || !showEventDialog) return null;

    return (
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'rgba(0,0,0,0.8)',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        zIndex: 1000,
      }}>
        <div style={{
          background: slavicStyles.colors.background,
          border: `3px solid ${slavicStyles.colors.primary}`,
          borderRadius: '12px',
          padding: '24px',
          maxWidth: '400px',
          width: '90%',
          textAlign: 'center',
        }}>
          <h3 style={slavicStyles.subtitle}>
            {currentEvent.type === 'combat' ? '‚öîÔ∏è –ë–æ–π' :
             currentEvent.type === 'treasure' ? 'üíé –°–æ–∫—Ä–æ–≤–∏—â–µ' :
             currentEvent.type === 'trap' ? '‚ö†Ô∏è –õ–æ–≤—É—à–∫–∞' :
             currentEvent.type === 'rest' ? 'üèïÔ∏è –û—Ç–¥—ã—Ö' :
             currentEvent.type === 'puzzle' ? 'üß© –ó–∞–≥–∞–¥–∫–∞' :
             currentEvent.type === 'boss' ? 'üëπ –ë–æ—Å—Å' : '‚ùì –°–æ–±—ã—Ç–∏–µ'}
          </h3>
          
          <p style={{ color: slavicStyles.colors.text, marginBottom: '16px' }}>
            {currentEvent.description}
          </p>

          {currentEvent.type === 'combat' && (
            <div style={{ marginBottom: '16px' }}>
              <p style={{ color: slavicStyles.colors.warning }}>
                –í—Ä–∞–≥: {currentEvent.enemy.type} (–£—Ä–æ–≤–µ–Ω—å {currentEvent.enemy.level})
              </p>
              <p style={{ color: slavicStyles.colors.textSecondary }}>
                HP: {currentEvent.enemy.hp} | –°–∏–ª–∞: {currentEvent.enemy.stats.str}
              </p>
            </div>
          )}

          {eventResult && (
            <div style={{
              padding: '12px',
              borderRadius: '6px',
              marginBottom: '16px',
              background: eventResult.victory ? 'rgba(34, 139, 34, 0.2)' : 'rgba(220, 20, 60, 0.2)',
              border: `1px solid ${eventResult.victory ? slavicStyles.colors.success : slavicStyles.colors.danger}`
            }}>
              <p style={{ color: eventResult.victory ? slavicStyles.colors.success : slavicStyles.colors.danger }}>
                {eventResult.message}
              </p>
              {eventResult.rewards && (
                <div style={{ marginTop: '8px' }}>
                  <p style={{ color: slavicStyles.colors.accent }}>
                    –ù–∞–≥—Ä–∞–¥—ã: {eventResult.rewards.gold} ü™ô, {eventResult.rewards.experience} ‚≠ê
                  </p>
                </div>
              )}
            </div>
          )}

          <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>
            {!eventResult ? (
              <button
                onClick={handleEvent}
                style={slavicStyles.button.primary}
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              </button>
            ) : (
              <button
                onClick={() => {
                  setShowEventDialog(false);
                  setCurrentEvent(null);
                  setEventResult(null);
                }}
                style={slavicStyles.button.primary}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div style={slavicStyles.container}>
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        marginBottom: '16px',
        padding: '8px',
        background: slavicStyles.colors.surface,
        borderRadius: '8px',
        border: `1px solid ${slavicStyles.colors.secondary}`
      }}>
        <h2 style={slavicStyles.subtitle}>–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è: {expedition.type}</h2>
        <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
          <span style={{ color: slavicStyles.colors.textSecondary }}>
            –®–∞–≥–∏: {expedition.steps}/{expedition.maxSteps}
          </span>
          <button
            onClick={onExit}
            style={slavicStyles.button.secondary}
          >
            –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      <div style={{ display: 'flex', gap: '20px' }}>
        {/* –ö–∞—Ä—Ç–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ */}
        <div style={{ flex: 1 }}>
          <h3 style={slavicStyles.subtitle}>–ö–∞—Ä—Ç–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏</h3>
          <div style={{ 
            display: 'inline-block', 
            border: `3px solid ${slavicStyles.colors.primary}`, 
            background: slavicStyles.colors.background,
            borderRadius: '8px',
            padding: '8px',
            boxShadow: '0 4px 12px rgba(0,0,0,0.6)'
          }}>
            {expedition.map.map((row, y) => (
              <div key={y} style={{ display: 'flex' }}>
                {row.map((cell, x) => renderCell(cell, x, y))}
              </div>
            ))}
          </div>
          
          <div style={{ marginTop: '12px', fontSize: '12px', color: slavicStyles.colors.textSecondary }}>
            <div>üë§ - –í—ã | üß± - –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ | ‚öîÔ∏è - –°–æ–±—ã—Ç–∏–µ | üëπ - –ë–æ—Å—Å</div>
            <div>–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å–æ—Å–µ–¥–Ω–µ–π –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ª–æ–≥ */}
        <div style={{ flex: 1, maxWidth: '300px' }}>
          <h3 style={slavicStyles.subtitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          
          {/* –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ */}
          <div style={slavicStyles.panel}>
            <h4 style={{ color: slavicStyles.colors.text, marginBottom: '8px' }}>–ì–µ—Ä–æ–π</h4>
            <div style={{ color: slavicStyles.colors.textSecondary, fontSize: '14px' }}>
              <div>HP: {player.hp}/100</div>
              <div>–£—Ä–æ–≤–µ–Ω—å: {player.level}</div>
              <div>–û–ø—ã—Ç: {player.experience}</div>
            </div>
          </div>

          {/* –¶–µ–ª—å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ */}
          <div style={slavicStyles.panel}>
            <h4 style={{ color: slavicStyles.colors.text, marginBottom: '8px' }}>–¶–µ–ª—å</h4>
            <div style={{ color: slavicStyles.colors.textSecondary, fontSize: '14px' }}>
              {expedition.goal === 'kill_boss' && '–ü–æ–±–µ–¥–∏—Ç—å –±–æ—Å—Å–∞'}
              {expedition.goal === 'find_item' && '–ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç'}
              {expedition.goal === 'reach_end' && '–î–æ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞'}
              {expedition.goal === 'collect_materials' && '–°–æ–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã'}
              {expedition.goal === 'rescue_npc' && '–°–ø–∞—Å—Ç–∏ NPC'}
            </div>
          </div>

          {/* –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π */}
          <div style={slavicStyles.panel}>
            <h4 style={{ color: slavicStyles.colors.text, marginBottom: '8px' }}>–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π</h4>
            <div style={{ 
              maxHeight: '200px', 
              overflowY: 'auto',
              fontSize: '12px',
              color: slavicStyles.colors.textSecondary
            }}>
              {log.slice(-10).map((entry, index) => (
                <div key={index} style={{ marginBottom: '4px' }}>
                  {entry.message}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {renderEventDialog()}
    </div>
  );
} 