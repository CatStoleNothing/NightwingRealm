import React from 'react';
import { slavicStyles } from '../styles/CombatStyles';

export function PlayerStats({ player, game }) {
  const renderStatBar = (label, current, max, color) => (
    <div style={slavicStyles.statusBar.container}>
      <div style={slavicStyles.statusBar.label}>
        {label}: {current}/{max}
      </div>
      <div style={slavicStyles.statusBar.bar}>
        <div 
          style={{
            ...slavicStyles.statusBar.fill,
            ...slavicStyles.statusBar[color],
            width: `${(current / max) * 100}%`
          }}
        />
      </div>
    </div>
  );

  const renderStat = (label, value, color = 'text') => (
    <div style={{ 
      display: 'flex', 
      justifyContent: 'space-between', 
      marginBottom: '4px',
      color: slavicStyles.colors[color]
    }}>
      <span>{label}:</span>
      <span style={{ fontWeight: 'bold' }}>{value}</span>
    </div>
  );

  const renderEffects = () => {
    if (!player.effects || player.effects.length === 0) return null;
    
    return (
      <div style={{ marginTop: '12px' }}>
        <div style={{ color: slavicStyles.colors.accent, fontWeight: 'bold', marginBottom: '4px' }}>
          –≠—Ñ—Ñ–µ–∫—Ç—ã:
        </div>
        {player.effects.map((effect, index) => (
          <div key={index} style={{ 
            color: slavicStyles.colors.warning, 
            fontSize: '12px',
            marginBottom: '2px'
          }}>
            {effect.type} ({effect.duration} —Ö–æ–¥–æ–≤)
          </div>
        ))}
      </div>
    );
  };

  const renderTempEffects = () => {
    if (!player.tempEffects || player.tempEffects.length === 0) return null;
    
    return (
      <div style={{ marginTop: '8px' }}>
        <div style={{ color: slavicStyles.colors.info, fontWeight: 'bold', marginBottom: '4px' }}>
          –í—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:
        </div>
        {player.tempEffects.map((effect, index) => (
          <div key={index} style={{ 
            color: slavicStyles.colors.success, 
            fontSize: '12px',
            marginBottom: '2px'
          }}>
            {effect.type} ({effect.duration} —Ö–æ–¥–æ–≤)
          </div>
        ))}
      </div>
    );
  };

  const renderResistances = () => {
    if (!player.resistances) return null;
    
    const resistanceEntries = Object.entries(player.resistances);
    if (resistanceEntries.length === 0) return null;
    
    return (
      <div style={{ marginTop: '12px' }}>
        <div style={{ color: slavicStyles.colors.info, fontWeight: 'bold', marginBottom: '4px' }}>
          –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:
        </div>
        {resistanceEntries.map(([type, value]) => (
          <div key={type} style={{ 
            color: slavicStyles.colors.success, 
            fontSize: '12px',
            marginBottom: '2px'
          }}>
            {type}: {Math.floor(value * 100)}%
          </div>
        ))}
      </div>
    );
  };

  return (
    <div style={slavicStyles.panel}>
      <h3 style={slavicStyles.subtitle}>–ì–µ—Ä–æ–π</h3>
      
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
      <div style={{ marginBottom: '16px' }}>
        <div style={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          marginBottom: '8px'
        }}>
          <span style={{ color: slavicStyles.colors.text, fontWeight: 'bold' }}>
            –£—Ä–æ–≤–µ–Ω—å {player.level}
          </span>
          <span style={{ color: slavicStyles.colors.accent, fontWeight: 'bold' }}>
            {game.gold} ü™ô
          </span>
        </div>
        
        {renderStatBar('–ó–¥–æ—Ä–æ–≤—å–µ', player.hp, 100, 'health')}
        {renderStatBar('–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', player.stamina, 50, 'stamina')}
        {renderStatBar('–ú–∞–Ω–∞', player.mana, 20, 'mana')}
        
        <div style={{ 
          color: slavicStyles.colors.textSecondary, 
          fontSize: '12px',
          marginTop: '4px'
        }}>
          –û–ø—ã—Ç: {player.experience}/{player.level * 100}
        </div>
      </div>

      {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
      <div style={{ marginBottom: '16px' }}>
        <div style={{ color: slavicStyles.colors.accent, fontWeight: 'bold', marginBottom: '8px' }}>
          –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
        </div>
        {renderStat('–°–∏–ª–∞', player.stats.str)}
        {renderStat('–õ–æ–≤–∫–æ—Å—Ç—å', player.stats.agi)}
        {renderStat('–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', player.stats.int)}
        {player.armor && renderStat('–ë—Ä–æ–Ω—è', player.armor, 'info')}
        {player.dodge && renderStat('–£–∫–ª–æ–Ω–µ–Ω–∏–µ', `${Math.floor(player.dodge * 100)}%`, 'info')}
        {player.critChance && renderStat('–ö—Ä–∏—Ç. —à–∞–Ω—Å', `${Math.floor(player.critChance * 100)}%`, 'warning')}
      </div>

      {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ */}
      {(player.shadowStep || player.dragonFear || player.armorBoost) && (
        <div style={{ marginBottom: '16px' }}>
          <div style={{ color: slavicStyles.colors.warning, fontWeight: 'bold', marginBottom: '8px' }}>
            –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
          </div>
          {player.shadowStep && renderStat('–¢–µ–Ω–µ–≤–æ–π —à–∞–≥', `${Math.floor(player.shadowStep * 100)}%`, 'warning')}
          {player.dragonFear && renderStat('–°—Ç—Ä–∞—Ö –¥—Ä–∞–∫–æ–Ω–∞', `${Math.floor(player.dragonFear * 100)}%`, 'warning')}
          {player.armorBoost && renderStat('–£—Å–∏–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏', player.armorBoost, 'warning')}
        </div>
      )}

      {/* –≠—Ñ—Ñ–µ–∫—Ç—ã */}
      {renderEffects()}
      {renderTempEffects()}
      {renderResistances()}
    </div>
  );
} 